@model IEnumerable<Result>
@{
    ViewData["Title"] = "Solved Problem";
}

<h1 class="text-center text-primary my-4">Solved Problem</h1>

<div class="container">

    <h4 class="text-secondary">Results</h4>
    <hr />
    <div class="container my-4">
        <div class="row justify-content-center align-items-center">
            <div class="col-md-6" style="background-color: aliceblue;">
                <canvas id="functionGraph" class="w-100 border rounded" style="height: 400px;"></canvas>
            </div>
        </div>
    </div>

   
    <div>
        <h4 style="color: #00FFFF;">
            Shape Function is:
            @if (TempData["SHapeFunction"] != null)
            {
                <span class="font-weight-bold" style="color: #00BFFF;">
                    @TempData["SHapeFunction"], <b>x₀</b> = @TempData["x0"], <b>y₀</b> = @TempData["y0"]
                </span>
            }
            else
            {
                <span class="text-danger">No function defined.</span>
            }
        </h4>
    </div>

    
    <div class="results-container d-flex mt-4 gap-3">
        <div class="table-container" style="flex: 1;">
            <h4 class="text-dark">Calculated Results:</h4>
            <table class="table table-bordered table-striped table-hover">
                <thead class="bg-info text-white">
                    <tr>
                        <th>#</th>
                        <th>X</th>
                        <th>Y</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.Select((value, index) => new { value, index }))
                    {
                        <tr>
                            <td>@(item.index + 1)</td>
                            <td>@item.value.X</td>
                            <td>@item.value.y</td>
                        </tr>
                    }
                </tbody>
                <tfoot>
                    <tr>

                        <td colspan="3">

                            <a class="btn btn-outline-success mt-3" asp-action="Create" asp-controller="Problem">
                                Create and Move to Problem
                            </a>

                        </td>
                    </tr>
                </tfoot>

            </table>
        </div>
    </div>
</div>

@section Scripts
{
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script>
      
        const xValues = @Html.Raw(Json.Serialize(Model.Select(m => m.X).ToList()));
        const yValues = @Html.Raw(Json.Serialize(Model.Select(m => m.y).ToList()));

      
        if (!xValues || !yValues || xValues.length === 0 || yValues.length === 0) {
            console.error("Invalid or missing data for the chart.");
        }
        else {
        
            const ctx = document.getElementById('functionGraph').getContext('2d');
            if (ctx) {
                new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: xValues,
                        datasets: [{
                            label: '@ViewBag.NameFunction',
                            data: yValues,
                            borderColor: 'rgba(75, 192, 192, 1)',
                            backgroundColor: 'rgba(75, 192, 192, 0.2)',
                            fill: true,
                            tension: 0.4
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            legend: {
                                display: true,
                                position: 'top'
                            },
                            tooltip: {
                                enabled: true,
                                mode: 'index',
                                intersect: false
                            }
                        },
                        scales: {
                            x: {
                                title: {
                                    display: true,
                                    text: 'X Values'
                                },
                                grid: {
                                    color: '#ddd',
                                    lineWidth: 0.5
                                }
                            },
                            y: {
                                title: {
                                    display: true,
                                    text: 'Y Values'
                                },
                                grid: {
                                    color: '#ddd',
                                    lineWidth: 0.5
                                }
                            }
                        }
                    }
                });
            } 
            else {
                console.error("Canvas context for the chart is not available.");
            }
        }

       
        const shapeFunction = "@(TempData["SHapeFunction"] ?? "x^2 + y^2 + 8")";
        const x0 = parseFloat(@TempData["x0"] ?? 0);
        const y0 = parseFloat(@TempData["y0"] ?? 0);

        console.log("Shape Function:", shapeFunction);
        console.log("x₀:", x0);
        console.log("y₀:", y0);

    
        window.onload = function () {
            const canvas = document.getElementById('functionGraph');
            if (!canvas) {
                console.error("Canvas element not found.");
                return;
            }

            const ctx = canvas.getContext('2d');
            if (!ctx) {
                console.error("Canvas context not available.");
                return;
            }

         
            canvas.width = canvas.offsetWidth;
            canvas.height = canvas.offsetHeight;

       
            const drawGrid = () => {
                ctx.strokeStyle = "#ddd";
                ctx.lineWidth = 0.5;

              
                for (let x = 0; x < canvas.width; x += 20) {
                    ctx.beginPath();
                    ctx.moveTo(x, 0);
                    ctx.lineTo(x, canvas.height);
                    ctx.stroke();
                }

               
                for (let y = 0; y < canvas.height; y += 20) {
                    ctx.beginPath();
                    ctx.moveTo(0, y);
                    ctx.lineTo(canvas.width, y);
                    ctx.stroke();
                }
            };

            
            const drawAxes = () => {
                ctx.strokeStyle = "#000";
                ctx.lineWidth = 1;

                ctx.beginPath();
                ctx.moveTo(0, canvas.height / 2);
                ctx.lineTo(canvas.width, canvas.height / 2);
                ctx.stroke();

               
                ctx.beginPath();
                ctx.moveTo(canvas.width / 2, 0);
                ctx.lineTo(canvas.width / 2, canvas.height);
                ctx.stroke();
            };

         
            const redrawCanvas = () => {
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                drawGrid();
                drawAxes();
            };

      
            redrawCanvas();

         
            window.addEventListener('resize', () => {
                canvas.width = canvas.offsetWidth;
                canvas.height = canvas.offsetHeight;
                redrawCanvas();
            });
        };
    </script>
}
